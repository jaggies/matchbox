if $(OS) = MACOSX {
	# Had to compile this manually.
	GCC_HOME = $(HOME)/trees/open-source/gcc-arm-none-eabi-4_9-2015q3/bin/ ;
} else {
	GCC_HOME = /bin/ ;
}
ARCH = arm-none-eabi ;
GCC_PATH = $(GCC_HOME)$(ARCH) ;
ALL_LOCATE_TARGET = $(TOP)/build/$(ARCH) ;
AS = $(GCC_PATH)-as ;
AR = $(GCC_PATH)-ar cur ;
CC = $(GCC_PATH)-gcc ;
C++ = $(GCC_PATH)-g++ ;
LD = $(GCC_PATH)-ld ;
RANLIB = $(GCC_PATH)-ranlib ;
LINK = $(C++) ;

OPTIM = -Os -g ;


DEFINES += STM32H743xx ;
#DEFINES += STM32F415xx ;

DEFINES = __STM32__ ARM_MATH_CM4 __FPU_PRESENT=1U HSE_VALUE=16000000 ;

#DEFINES += USE_FULL_ASSERT ;
#DEFINES += DEBUG ;
#DEFINES += "\"assert_param(a)=\"" ; # Temporarily disable warnings about implicit assert_param()
#DEFINES += USE_HW_RTC ;

# M4 with hardware floating point
CFLAGS = $(OPTIM) -D$(DEFINES) -mthumb -mlittle-endian -mfpu=fpv4-sp-d16 -mfloat-abi=hard -mcpu=cortex-m4 ;
CCFLAGS += $(CFLAGS) -std=c99 ;
C++FLAGS += $(CFLAGS) -fno-rtti -fno-exceptions ;

#LDFLAGS += -nostdlib -nostartfiles -ffreestanding -mfloat-abi=hard ;
LDFLAGS += -mfpu=fpv4-sp-d16 -mthumb -mfloat-abi=hard ; #/ --specs=nosys.specs ;

CC += $(CFLAGS) $(COPT) ;
C++ += $(CFLAGS) ;
LINK += $(LDFLAGS) -L $(ALL_LOCATE_TARGET) -Wl,--gc-sections -mcpu=cortex-m4 ;

